-- 1. CREATE THE 'chatbots' TABLE
-- This table stores each chatbot and its specific configuration.
CREATE TABLE
  public.chatbots (
    id UUID NOT NULL DEFAULT gen_random_uuid (),
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    user_id UUID NOT NULL DEFAULT auth.uid (),
    name TEXT NOT NULL,
    model TEXT NOT NULL DEFAULT 'gpt-3.5-turbo',
    temperature REAL NOT NULL DEFAULT 0.5,
    prompt TEXT NOT NULL DEFAULT 'Answer the user''s questions based only on the following context. If the answer is not in the context, reply politely that you do not have that information available.s',
    CONSTRAINT chatbots_pkey PRIMARY KEY (id),
    CONSTRAINT chatbots_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users (id) ON DELETE CASCADE
  );

-- Add comments for clarity
COMMENT ON TABLE public.chatbots IS 'Stores individual chatbots and their configurations.';
COMMENT ON COLUMN public.chatbots.user_id IS 'Links the chatbot to the creating user.';
COMMENT ON COLUMN public.chatbots.model IS 'The OpenAI model to use for this chatbot (e.g., gpt-4, gpt-3.5-turbo).';
COMMENT ON COLUMN public.chatbots.temperature IS 'The creativity setting for the model (0.0 to 1.0).';
COMMENT ON COLUMN public.chatbots.prompt IS 'The system prompt/template for the RAG chain.';


-- 2. CREATE THE 'documents' TABLE
-- This is your vector store, linked to both users and chatbots.
CREATE TABLE
  public.documents (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    user_id UUID NOT NULL DEFAULT auth.uid (),
    chatbot_id UUID NOT NULL,
    content TEXT NOT NULL,
    embedding VECTOR(1536) NOT NULL,
    CONSTRAINT documents_pkey PRIMARY KEY (id),
    CONSTRAINT documents_chatbot_id_fkey FOREIGN KEY (chatbot_id) REFERENCES public.chatbots (id) ON DELETE CASCADE,
    CONSTRAINT documents_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users (id) ON DELETE CASCADE
  );

-- Add comments for clarity
COMMENT ON TABLE public.documents IS 'Stores document chunks and their vector embeddings for RAG.';
COMMENT ON COLUMN public.documents.chatbot_id IS 'Links the document to a specific chatbot.';


-- 3. CREATE THE SEARCH FUNCTION
-- This function securely searches for relevant documents for a given user and chatbot.
CREATE OR REPLACE FUNCTION match_documents (
  query_embedding VECTOR(1536),
  p_chatbot_id UUID,
  match_count INT DEFAULT 5
)
RETURNS TABLE (
  id BIGINT,
  content TEXT,
  similarity FLOAT
)
LANGUAGE sql STABLE
AS $$
  SELECT
    d.id,
    d.content,
    1 - (d.embedding <=> query_embedding) as similarity
  FROM
    documents d
  WHERE
    d.chatbot_id = p_chatbot_id AND d.user_id = auth.uid() -- Security filter
  ORDER BY
    similarity DESC
  LIMIT
    match_count;
$$;